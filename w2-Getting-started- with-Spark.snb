{"metadata":{"name":"Getting Started  with Spark","user_save_timestamp":"1970-01-01T10:00:00.000Z","auto_save_timestamp":"1970-01-01T10:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{},"cell_type":"markdown","source":"#Firing up spark"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"import org.apache.spark.sql.SQLContext\n\nval sqlContext = new SQLContext(sc)\nsc.version","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.sql.SQLContext\nsqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@67d702a9\nres17: String = 1.5.1\n"},{"metadata":{},"data":{"text/html":"1.5.1"},"output_type":"execute_result","execution_count":25}]},{"metadata":{},"cell_type":"markdown","source":"#Fetch csv-library dependency"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":":dp com.databricks % spark-csv_2.10 % 1.2.0","outputs":[{"name":"stdout","output_type":"stream","text":"warning: there were 4 feature warning(s); re-run with -feature for details\nglobalScope.jars: Array[String] = [Ljava.lang.String;@5027d504\nres9: List[String] = List(/tmp/spark-notebook/repo/81f56d15-7534-4330-8093-59f1261d74fb/cache/com.databricks/spark-csv_2.10/jars/spark-csv_2.10-1.2.0.jar, /home/aerondir/.m2/repository/org/scala-lang/scala-library/2.10.4/scala-library-2.10.4.jar, /tmp/spark-notebook/repo/81f56d15-7534-4330-8093-59f1261d74fb/cache/org.apache.commons/commons-csv/jars/commons-csv-1.1.jar, /tmp/spark-notebook/repo/81f56d15-7534-4330-8093-59f1261d74fb/cache/com.univocity/univocity-parsers/jars/univocity-parsers-1.5.1.jar, \"\")\n"},{"metadata":{},"data":{"text/html":"<div class=\"container-fluid\"><div><div class=\"col-md-12\"><div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anoncadfc076b691cac06ebf0a2d407920b8&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;/tmp/spark-notebook/repo/81f56d15-7534-4330-8093-59f1261d74fb/cache/com.databricks/spark-csv_2.10/jars/spark-csv_2.10-1.2.0.jar&quot;},{&quot;string value&quot;:&quot;/home/aerondir/.m2/repository/org/scala-lang/scala-library/2.10.4/scala-library-2.10.4.jar&quot;},{&quot;string value&quot;:&quot;/tmp/spark-notebook/repo/81f56d15-7534-4330-8093-59f1261d74fb/cache/org.apache.commons/commons-csv/jars/commons-csv-1.1.jar&quot;},{&quot;string value&quot;:&quot;/tmp/spark-notebook/repo/81f56d15-7534-4330-8093-59f1261d74fb/cache/com.univocity/univocity-parsers/jars/univocity-parsers-1.5.1.jar&quot;},{&quot;string value&quot;:&quot;&quot;}],&quot;genId&quot;:&quot;1083511394&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"string value\"],\"nrow\":5,\"shown\":5,\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n        <label for=\"input-anon1c976ee6ee159072465bb3f45b45591f\">\n      Max Points\n    </label><input id=\"input-anon1c976ee6ee159072465bb3f45b45591f\" type=\"number\" name=\"input-anon1c976ee6ee159072465bb3f45b45591f\" data-bind=\"textInput: value, fireChange: true, valueUpdate: 'input'\">\n      <script data-selector=\"#input-anon1c976ee6ee159072465bb3f45b45591f\" data-this=\"{&quot;valueId&quot;:&quot;anon1c976ee6ee159072465bb3f45b45591f&quot;,&quot;valueInit&quot;:25}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(\n ['observable', 'knockout'],\n function (Observable, ko) {\n   //console.log(\"-----------\")\n   //console.dir(this);\n   //console.dir(valueId);\n   var obs = Observable.makeObservable(valueId)\n                       .extend({ rateLimit: { //throttle\n                                   timeout: 500,\n                                   method: \"notifyWhenChangesStop\"\n                                 }\n                               }\n                       );\n   ko.applyBindings({\n     value: obs\n   }, this);\n   obs(valueInit);\n }\n)/*]]>*/</script>\n    </input>\n      </div></div></div></div></div>"},"output_type":"execute_result","execution_count":6}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val mnt = \"/home/aerondir/lab/ml-foundations-scala\"","outputs":[{"name":"stdout","output_type":"stream","text":"mnt: String = /home/aerondir/lab/ml-foundations-scala\n"},{"metadata":{},"data":{"text/html":"/home/aerondir/lab/ml-foundations-scala"},"output_type":"execute_result","execution_count":26}]},{"metadata":{},"cell_type":"markdown","source":"#Load a tabular data set"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val df = sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .load(s\"$mnt/data/people-example.csv\")","outputs":[{"name":"stdout","output_type":"stream","text":"df: org.apache.spark.sql.DataFrame = [First Name: string, Last Name: string, Country: string, age: int]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon2800ff90349d93ce6424f98be897c22a&quot;,&quot;partitionIndexId&quot;:&quot;anon96b0874fe4ca3056961ac27663f8b54d&quot;,&quot;numPartitions&quot;:1,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;First Name&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Last Name&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Country&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":27}]},{"metadata":{},"cell_type":"markdown","source":"#DataFrame basics"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"df //we can view first few lines of table","outputs":[{"name":"stdout","output_type":"stream","text":"res18: org.apache.spark.sql.DataFrame = [First Name: string, Last Name: string, Country: string, age: int]\n"},{"metadata":{},"data":{"text/html":"<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonf4d8c52d8a4bc7dca74d529ea8364da7&quot;,&quot;partitionIndexId&quot;:&quot;anon3e26045006b096af5266669ab44433a7&quot;,&quot;numPartitions&quot;:1,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;First Name&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Last Name&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;Country&quot;,&quot;type&quot;:&quot;string&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"},"output_type":"execute_result","execution_count":28}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"df.head()","outputs":[{"name":"stdout","output_type":"stream","text":"res20: org.apache.spark.sql.Row = [Bob,Smith,United States,24]\n"},{"metadata":{},"data":{"text/html":"[Bob,Smith,United States,24]"},"output_type":"execute_result","execution_count":30}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"","outputs":[]}],"nbformat":4}